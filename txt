const express = require("express");
const mongoose = require("mongoose");
const path = require("path");
const emailRoutes = require('./routes/email');
const projectRoutes = require("./routes/project");
const aboutRoutes = require("./routes/about");
const skillRoutes = require("./routes/skill");
const multer = require("multer");
const cors = require("cors");
require("dotenv").config();

const port = process.env.PORT || 8000;
const app = express();

const corsOriginsEnv = process.env.CORS_ORIGINS || "*";
const corsOrigins = corsOriginsEnv === "*" ? "*" : corsOriginsEnv.split(",");
if (!process.env.CORS_ORIGINS) {
  console.warn('Warning: CORS_ORIGINS environment variable not set. Defaulting to "*"');
}
app.use(
  cors({
    origin: corsOrigins,
    methods: ["GET", "POST", "PUT", "DELETE"],
    allowedHeaders: ["Content-Type"],
  })
);

mongoose
  .connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("Connected to MongoDB"))
  .catch((err) => console.error("MongoDB connection error:", err));

app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "views"));

app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(express.static(path.join(__dirname, "public")));
app.use("/uploads", express.static(path.join(__dirname, "public/uploads")));

app.use("/api", projectRoutes);
app.use("/api/about", aboutRoutes);
app.use("/api/skills", skillRoutes);
app.use('/api/email', emailRoutes);


app.get("/", (req, res) => {
  res.render("home", { message: null, project: {} });
});

// Error handling middleware
app.use((err, req, res, next) => {
  if (err instanceof multer.MulterError) {
    return res.status(400).render("edit-project", {
      project: req.body,
      message: `File upload error: ${err.message}`,
    });
  } else if (err) {
    return res.status(400).render("edit-project", {
      project: req.body,
      message: err.message || "An error occurred",
    });
  }
  next();
});

app.listen(port, () => console.log(`Server started at PORT: ${port}`));

MONGO_URI=mongodb+srv://vishantvelip:vishants@vishant.qceexb7.mongodb.net/?retryWrites=true&w=majority&appName=vishant
PORT=8000
# CORS allowed origins (allows all origins for development)
CORS_ORIGINS=*

const { Router } = require("express");
const Skill = require("../models/skills");
const upload = require("../middleware/multerConfig");
const path = require("path");
const fs = require("fs").promises;
const router = Router();

router.get("/view", async (req, res) => {
  const skills = await Skill.find();
  res.render("view-skill", { skills, message: null });
});

router.get("/create", (req, res) => {
  res.render("edit-skill", { skill: {}, message: null });
});

router.post("/create", upload.single("projectImg"), async (req, res) => {
  try {
    const { skillName, description } = req.body;
    let projectImg = "";
    if (req.file) projectImg = `uploads/${req.file.filename}`;
    if (!skillName || !description) {
      return res.status(400).render("edit-skill", {
        skill: req.body,
        message: "All fields are required",
      });
    }
    await Skill.create({ skillName, description, projectImg });
    res.redirect("/api/skills/view");
  } catch (error) {
    res.status(500).render("edit-skill", { skill: req.body, message: error.message });
  }
});

router.get("/edit/:id", async (req, res) => {
  const skill = await Skill.findById(req.params.id);
  res.render("edit-skill", { skill, message: null });
});

router.post("/update/:id", upload.single("projectImg"), async (req, res) => {
  try {
    const skill = await Skill.findById(req.params.id);
    let projectImg = skill.projectImg;
    if (req.file) {
      if (projectImg) {
        try { await fs.unlink(path.join(__dirname, "../public", projectImg)); } catch {}
      }
      projectImg = `uploads/${req.file.filename}`;
    }
    await Skill.findByIdAndUpdate(req.params.id, {
      skillName: req.body.skillName,
      description: req.body.description,
      projectImg
    });
    res.redirect("/api/skills/view");
  } catch (error) {
    res.status(500).render("edit-skill", { skill: req.body, message: error.message });
  }
});

router.post("/delete/:id", async (req, res) => {
  const skill = await Skill.findById(req.params.id);
  if (skill.projectImg) {
    try { await fs.unlink(path.join(__dirname, "../public", skill.projectImg)); } catch {}
  }
  await Skill.findByIdAndDelete(req.params.id);
  res.redirect("/api/skills/view");
});

module.exports = router;

const { Router } = require("express");
const Project = require("../models/project");
const fs = require("fs").promises;
const path = require("path");
const upload = require("../middleware/multerConfig");
const mongoose = require("mongoose");

const router = Router();

router.get("/api-view", (req, res) => {
  res.render("api-view");
});

// JSON API for all projects
router.get("/view", async (req, res) => {
  try {
    const searchQuery = req.query.search || "";
    const query = searchQuery
      ? {
          $or: [
            { name: { $regex: searchQuery, $options: "i" } },
            { title: { $regex: searchQuery, $options: "i" } },
          ],
        }
      : {};
    const projects = await Project.find(query);
    res.json(projects);
  } catch (error) {
    res.status(500).json({ message: "Failed to load projects", error: error.message });
  }
});

// Create Project (form)
router.post("/create-project", upload.single("projectImg"), async (req, res) => {
  try {
    const { name, title, description } = req.body;
    if (!name || !title || !description) {
      return res.status(400).render("home", {
        project: req.body,
        message: "All fields are required",
      });
    }
    let projectImg = "";
    if (req.file) {
      projectImg = `uploads/${req.file.filename}`;
    }
    const newProject = new Project({ name, title, description, projectImg });
    await newProject.save();
    res.render("home", {
      project: {},
      message: "Project created successfully",
    });
  } catch (error) {
    res.status(500).render("home", {
      project: req.body,
      message: error.message || "Failed to create project",
    });
  }
});

// Edit project form
router.get("/edit/:id", async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      const projects = await Project.find();
      return res.status(400).render("view-project", {
        projects,
        message: "Invalid project ID",
        searchQuery: "",
      });
    }
    const project = await Project.findById(req.params.id);
    if (!project) {
      const projects = await Project.find();
      return res.status(404).render("view-project", {
        projects,
        message: "Project not found",
        searchQuery: "",
      });
    }
    res.render("edit-project", { project, message: null });
  } catch (error) {
    const projects = await Project.find();
    res.status(500).render("view-project", {
      projects,
      message: `Failed to load project: ${error.message}`,
      searchQuery: "",
    });
  }
});

// Update a project (returns updated project JSON for AJAX, EJS for browser)
router.post("/update-project/:id", upload.single("projectImg"), async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      if (req.accepts("json")) {
        return res.status(400).json({ message: "Invalid project ID" });
      }
      const projects = await Project.find();
      return res.status(400).render("view-project", {
        projects,
        message: "Invalid project ID",
        searchQuery: "",
      });
    }
    const { name, title, description } = req.body;
    let project = await Project.findById(req.params.id);
    if (!project) {
      if (req.accepts("json")) {
        return res.status(404).json({ message: "Project not found" });
      }
      const projects = await Project.find();
      return res.status(404).render("view-project", {
        projects,
        message: "Project not found",
        searchQuery: "",
      });
    }
    if (!name || !title || !description) {
      if (req.accepts("json")) {
        return res.status(400).json({ message: "All fields are required" });
      }
      return res.status(400).render("edit-project", {
        project,
        message: "All fields are required",
      });
    }
    let projectImg = project.projectImg;
    if (req.file) {
      if (projectImg) {
        try {
          await fs.unlink(path.join(__dirname, "../public", projectImg));
        } catch (err) {}
      }
      projectImg = `uploads/${req.file.filename}`;
    }
    project = await Project.findByIdAndUpdate(
      req.params.id,
      { name, title, description, projectImg },
      { new: true }
    );
    if (req.accepts("json")) {
      return res.json(project);
    }
    const projects = await Project.find();
    res.render("view-project", {
      projects,
      message: "Project updated successfully",
      searchQuery: "",
    });
  } catch (error) {
    if (req.accepts("json")) {
      return res.status(500).json({ message: error.message || "Failed to update project" });
    }
    const project = await Project.findById(req.params.id);
    if (!project) {
      const projects = await Project.find();
      return res.status(404).render("view-project", {
        projects,
        message: "Project not found",
        searchQuery: "",
      });
    }
    res.status(500).render("edit-project", {
      project,
      message: error.message || "Failed to update project",
    });
  }
});

// Delete a project (AJAX and EJS support)
router.post("/delete/:id", async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      if (req.accepts("json")) {
        return res.status(400).json({ message: "Invalid project ID" });
      }
      const projects = await Project.find();
      return res.status(400).render("view-project", {
        projects,
        message: "Invalid project ID",
        searchQuery: "",
      });
    }
    const project = await Project.findById(req.params.id);
    if (!project) {
      if (req.accepts("json")) {
        return res.status(404).json({ message: "Project not found" });
      }
      const projects = await Project.find();
      return res.status(404).render("view-project", {
        projects,
        message: "Project not found",
        searchQuery: "",
      });
    }
    if (project.projectImg) {
      try {
        await fs.unlink(path.join(__dirname, "../public", project.projectImg));
      } catch (err) {}
    }
    await Project.findByIdAndDelete(req.params.id);
    if (req.accepts("json")) {
      return res.json({ message: "Project deleted successfully" });
    }
    const projects = await Project.find();
    res.render("view-project", {
      projects,
      message: "Project deleted successfully",
      searchQuery: "",
    });
  } catch (error) {
    if (req.accepts("json")) {
      return res.status(500).json({ message: "Failed to delete project" });
    }
    const projects = await Project.find();
    res.status(500).render("view-project", {
      projects,
      message: "Failed to delete project",
      searchQuery: "",
    });
  }
});

module.exports = router;

const express = require('express');
const router = express.Router();
const emailjs = require('@emailjs/nodejs');


emailjs.init({
  publicKey: 'JCxc_yKuAex9-h3QS', 
  privateKey: 'W_zMXHKXKvHjG9dwi63i-',

});

router.post('/send-email', async (req, res) => {
  const { name, email, message } = req.body;

  if (!name || !email || !message) {
    return res.status(400).json({ error: 'Please fill in all fields.' });
  }

  try {
    const templateParams = {
      name,
      email,
      message,
    };


    await emailjs.send('service_jzre4ps', 'template_9g5qb7p', templateParams);

    res.status(200).json({ message: 'Email sent successfully' });
  } catch (error) {
    console.error('EmailJS error:', error);
    res.status(500).json({ error: 'Failed to send email' });
  }
});

module.exports = router;


const { Router } = require("express");
const About = require("../models/about");
const router = Router();

router.get("/view", async (req, res) => {
  const abouts = await About.find();
  res.render("view-about", { abouts, message: null });
});

router.get("/create", (req, res) => {
  res.render("edit-about", { about: {}, message: null });
});

router.post("/create", async (req, res) => {
  try {
    const { about } = req.body;
    if (!about) {
      return res.status(400).render("edit-about", { about: req.body, message: "About field is required" });
    }
    await About.create({ about });
    res.redirect("/api/about/view");
  } catch (error) {
    res.status(500).render("edit-about", { about: req.body, message: error.message });
  }
});

router.get("/edit/:id", async (req, res) => {
  const about = await About.findById(req.params.id);
  res.render("edit-about", { about, message: null });
});

router.post("/update/:id", async (req, res) => {
  try {
    await About.findByIdAndUpdate(req.params.id, { about: req.body.about });
    res.redirect("/api/about/view");
  } catch (error) {
    res.status(500).render("edit-about", { about: req.body, message: error.message });
  }
});

router.post("/delete/:id", async (req, res) => {
  await About.findByIdAndDelete(req.params.id);
  res.redirect("/api/about/view");
});

module.exports = router;

const { Schema, model } = require("mongoose");

const skillSchema = new Schema(
  {
    skillName: { type: String, 
    required: true, trim: true
   },
    description: { type: String,
     required: true, trim: true 
  },
    
  { timestamps: true }
);

module.exports = model("Skill", skillSchema);

const { Schema, model } = require("mongoose");

const projectSchema = new Schema(
  {
    name: { type: String,
    required: true, trim: true
  },
    title: { type: String, 
    required: true, trim: true 
  },
    description: { type: String,
    required: true, trim: true
  },
    projectImg: { type: String,
    default: "" }
  },
  { timestamps: true }
);

module.exports = model("Project", projectSchema);

const { Schema, model } = require('mongoose');

const aboutSchema = new Schema(
  {
    content: { 
      type: String, 
      required: [true, 'Content is required'], 
      trim: true,
      minlength: [10, 'Content must be at least 10 characters long'],
      maxlength: [1000, 'Content cannot exceed 1000 characters']
    },
  },
  { 
    timestamps: true,
    toJSON: { virtuals: true },
    toObject: { virtuals: true }
  }
);

const About = model('About', aboutSchema);

module.exports = About;

const multer = require("multer");
const path = require("path");

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, path.join(__dirname, "../public/uploads"));
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}${path.extname(file.originalname)}`);
  },
});

const upload = multer({
  storage,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB
  fileFilter: (req, file, cb) => {
    const fileTypes = /jpeg|jpg|png/;
    const extname = fileTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = fileTypes.test(file.mimetype);
    if (extname && mimetype) return cb(null, true);
    cb(new Error("Only JPEG and PNG images are allowed"));
  },
});

module.exports = upload;

fix all codes and create model UI i want pages 
 view-project details normal and json formet both and 
 i want view-skills page in json formet  and i want about-page
  json formet  
  and in home add options  like add-projects details,  add-about 
  and add skills options when i click on add-skills render  form to add skill details  
  
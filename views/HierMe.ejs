<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Hire Vishant Velip - Full-Stack Developer</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" />
  <!-- Keep your style as is for brevity -->
  <style>
    /* ... your existing CSS ... */
  </style>
</head>
<body>
  <!-- ... your existing markup ... -->

  <script>
    // API base URLs
    const API_BASE_A = 'https://database-managemet-api.onrender.com';
    const API_BASE_B = 'https://database-managemet-api.vercel.app';
    const MAX_RETRIES = 3;

    let selectedItems = [];
    let totalFee = 0;
    let totalHours = 0;
    let lastEmail = '';

    // Utility functions for cache (unchanged)
    function setCache(key, value, ttl) { /* ... */ }
    function getCache(key) { /* ... */ }

    // Fix: Proper fetch failover with error catching and fallback
    async function fetchWithTimeoutAndFailover(endpoint, options = {}, timeout = 10000) {
      // Fix: endpoint should not start with slash
      const endpoints = [`${API_BASE_A}/${endpoint.replace(/^\//, "")}`, `${API_BASE_B}/${endpoint.replace(/^\//, "")}`];
      let lastError;
      for (let attempt = 0; attempt < MAX_RETRIES; attempt++) {
        for (const url of endpoints) {
          try {
            const controller = new AbortController();
            const id = setTimeout(() => controller.abort(), timeout);
            const response = await fetch(url, { ...options, signal: controller.signal });
            clearTimeout(id);
            if (!response.ok) throw new Error(`HTTP error ${response.status}`);
            return response;
          } catch (error) {
            lastError = error;
            if (url === endpoints[endpoints.length - 1] && attempt < MAX_RETRIES - 1) {
              await new Promise(resolve => setTimeout(resolve, 1000));
            }
          }
        }
      }
      throw lastError || new Error('All fetch attempts failed');
    }

    function observeFadeIn(selector) { /* ... unchanged ... */ }

    // Fix: sendEmail to handle undefined data.message and error edge cases
    async function sendEmail(name, email, message, selectedItems, totalFee, isPayment = false, paymentStatus = 'Pending') {
      const container = document.getElementById('form-message');
      container.innerHTML = '<div class="loader">Sending email...</div>';
      container.style.display = 'block';
      try {
        const response = await fetchWithTimeoutAndFailover('api/email/send-email', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ name, email, message, selectedItems, totalFee, isPayment, paymentStatus })
        });
        const data = await response.json();
        if (data.error) throw new Error(data.error);
        container.innerHTML = `<p class="form-message success">${data.message || 'Email sent successfully!'}</p>`;
        if (!isPayment) {
          showPaymentPopup(email, totalFee);
        }
        return true;
      } catch (error) {
        container.innerHTML = `<p class="form-message error">Failed to send email: ${error.message || error}</p>`;
        return false;
      }
    }

    function copyUpiId(upiId) {
      navigator.clipboard.writeText(upiId).then(() => {
        const copyMessage = document.getElementById('copy-message');
        copyMessage.classList.add('visible');
        setTimeout(() => copyMessage.classList.remove('visible'), 2000);
      });
    }

    // Fix: UPI amount must be string, and for zero fee, should not redirect
    function generateUpiLink(amount, upiId, name, transactionNote, transactionId) {
      const params = new URLSearchParams({
        pa: upiId,
        pn: name,
        tn: transactionNote,
        am: String(amount),
        cu: 'INR',
        tr: transactionId,
      });
      return `upi://pay?${params.toString()}`;
    }

    function initiatePaymentOptions() {
      const payNowBtn = document.getElementById('pay-now-btn');
      const payLaterBtn = document.getElementById('pay-later-btn');
      const paymentMessage = document.getElementById('payment-message');

      payNowBtn.addEventListener('click', async () => {
        if (totalFee <= 0) {
          paymentMessage.innerHTML = '<p class="form-message error">Please select items to calculate a fee.</p>';
          return;
        }
        const emailInput = document.getElementById('payment-email');
        const email = emailInput.value.trim();
        if (!email || !validateEmail(email)) {
          paymentMessage.innerHTML = '<p class="form-message error">Please enter a valid email address.</p>';
          return;
        }
        const upiId = '9420970930@ibl';
        const payeeName = 'Vishant Velip';
        const transactionNote = 'Website Development Payment';
        const transactionId = `TXN${Date.now()}`;
        const upiLink = generateUpiLink(totalFee, upiId, payeeName, transactionNote, transactionId);
        let message = `Payment initiated for project.\nTransaction ID: ${transactionId}\nPayment Status: Pending\nNote: Payment is pending confirmation via UPI.\n\nSelected Project Items:\n${selectedItems.length > 0 ? '- ' + selectedItems.join('\n- ') : 'None'}\n\nTotal Estimated Cost: ₹${totalFee.toLocaleString('en-IN')}`;
        const success = await sendEmail('Client', email, message, selectedItems, totalFee, true, 'Pending');
        if (success) {
          paymentMessage.innerHTML = '<p class="form-message success">Redirecting to UPI app...</p>';
          setTimeout(() => {
            if (totalFee > 0) window.location.href = upiLink;
          }, 1000);
        } else {
          paymentMessage.innerHTML = '<p class="form-message error">Failed to send payment email. Please try again.</p>';
        }
      });

      payLaterBtn.addEventListener('click', async () => {
        const emailInput = document.getElementById('payment-email');
        const email = emailInput.value.trim();
        if (!email || !validateEmail(email)) {
          paymentMessage.innerHTML = '<p class="form-message error">Please enter a valid email address.</p>';
          return;
        }
        let message = `Payment deferred for project.\nPayment Status: Pending\nNote: Payment will be processed later.\n\nSelected Project Items:\n${selectedItems.length > 0 ? '- ' + selectedItems.join('\n- ') : 'None'}\n\nTotal Estimated Cost: ₹${totalFee.toLocaleString('en-IN')}`;
        const success = await sendEmail('Client', email, message, selectedItems, totalFee, true, 'Pending');
        if (success) {
          paymentMessage.innerHTML = '<p class="form-message success">You have chosen to pay later. We will contact you with payment details.</p>';
          document.getElementById('payment-container').classList.add('hidden');
        } else {
          paymentMessage.innerHTML = '<p class="form-message error">Failed to send payment email. Please try again.</p>';
        }
      });
    }

    // Add a simple email validator
    function validateEmail(email) {
      return /\S+@\S+\.\S+/.test(email);
    }

    function calculateCost() {
      const websiteTypeSelect = document.getElementById('website-type');
      const websiteTypeValue = parseInt(websiteTypeSelect.value) || 0;
      const websiteTypeText = websiteTypeSelect.options[websiteTypeSelect.selectedIndex].text;
      const tasks = Array.from(document.querySelectorAll('input[name="tasks"]:checked'));
      let tasksHours = 0;
      let fixedCosts = 0;
      const tasksLabels = tasks.map(task => {
        const label = task.parentElement.textContent.trim();
        const value = task.value;
        if (value.startsWith('fixed:')) {
          fixedCosts += parseFloat(value.split(':')[1]);
          return label;
        } else {
          tasksHours += parseInt(value);
          return label;
        }
      });

      totalHours = websiteTypeValue + tasksHours;
      const hourlyRate = 1500;
      totalFee = (totalHours * hourlyRate) + fixedCosts;
      selectedItems = [];
      if (websiteTypeValue > 0 && websiteTypeText !== 'None') selectedItems.push(websiteTypeText);
      selectedItems.push(...tasksLabels);

      const selectedItemsList = document.getElementById('selected-items-list');
      selectedItemsList.innerHTML = '';
      if (selectedItems.length > 0) {
        selectedItems.forEach(item => {
          const li = document.createElement('li');
          li.textContent = item;
          selectedItemsList.appendChild(li);
        });
        document.getElementById('contact-form').classList.remove('hidden');
      } else {
        const li = document.createElement('li');
        li.textContent = 'No items selected';
        selectedItemsList.appendChild(li);
        document.getElementById('contact-form').classList.add('hidden');
        document.getElementById('payment-container').classList.add('hidden');
      }

      document.getElementById('total-hours').textContent = totalHours;
      document.getElementById('total-fee').textContent = `₹${totalFee.toLocaleString('en-IN')}`;
    }

    function showPaymentPopup(email, fee) {
      lastEmail = email;
      document.getElementById('modal-fee').textContent = `₹${fee.toLocaleString('en-IN')}`;
      document.getElementById('modal-email').textContent = email;
      document.getElementById('modal-payment-message').innerHTML = '';
      document.getElementById('payment-modal-overlay').classList.add('active');
      document.body.style.overflow = 'hidden';
    }
    function hidePaymentPopup() {
      document.getElementById('payment-modal-overlay').classList.remove('active');
      document.body.style.overflow = '';
    }
    document.getElementById('close-modal').onclick = hidePaymentPopup;
    document.getElementById('payment-modal-overlay').onclick = function(e) {
      if (e.target === this) hidePaymentPopup();
    };
    document.getElementById('modal-pay-now').onclick = async function() {
      const upiId = '9420970930@ibl';
      const payeeName = 'Vishant Velip';
      const transactionNote = 'Website Development Payment';
      const transactionId = `TXN${Date.now()}`;
      const upiLink = generateUpiLink(totalFee, upiId, payeeName, transactionNote, transactionId);
      let message = `Payment initiated for project.\nTransaction ID: ${transactionId}\nPayment Status: Pending\nNote: Payment is pending confirmation via UPI.\n\nSelected Project Items:\n${selectedItems.length > 0 ? '- ' + selectedItems.join('\n- ') : 'None'}\n\nTotal Estimated Cost: ₹${totalFee.toLocaleString('en-IN')}`;
      const success = await sendEmail('Client', lastEmail, message, selectedItems, totalFee, true, 'Pending');
      if (success) {
        document.getElementById('modal-payment-message').innerHTML = '<span class="form-message success">Redirecting to UPI app...</span>';
        setTimeout(() => {
          if (totalFee > 0) window.location.href = upiLink;
        }, 900);
      } else {
        document.getElementById('modal-payment-message').innerHTML = '<span class="form-message error">Failed to send payment email. Please try again.</span>';
      }
    };
    document.getElementById('modal-pay-later').onclick = async function() {
      let message = `Payment deferred for project.\nPayment Status: Pending\nNote: Payment will be processed later.\n\nSelected Project Items:\n${selectedItems.length > 0 ? '- ' + selectedItems.join('\n- ') : 'None'}\n\nTotal Estimated Cost: ₹${totalFee.toLocaleString('en-IN')}`;
      const success = await sendEmail('Client', lastEmail, message, selectedItems, totalFee, true, 'Pending');
      if (success) {
        document.getElementById('modal-payment-message').innerHTML = '<span class="form-message success">You have chosen to pay later. We will contact you soon!</span>';
        setTimeout(hidePaymentPopup, 1300);
      } else {
        document.getElementById('modal-payment-message').innerHTML = '<span class="form-message error">Failed to send payment email. Please try again.</span>';
      }
    };

    const sendBtn = document.getElementById('send-btn');
    sendBtn.addEventListener('mousedown', function() {
      sendBtn.classList.add('glow');
    });
    sendBtn.addEventListener('mouseup', function() {
      setTimeout(() => sendBtn.classList.remove('glow'), 500);
    });

    const form = document.getElementById('hire-me-form');
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const name = document.getElementById('name').value;
      const email = document.getElementById('email').value;
      let message = document.getElementById('message').value;
      if (selectedItems.length > 0) {
        message += `\n\nSelected Project Items:\n- ${selectedItems.join('\n- ')}`;
      } else {
        message += '\n\nSelected Project Items: None';
      }
      message += `\n\nTotal Estimated Cost: ₹${totalFee.toLocaleString('en-IN')}\nPayment Status: Pending`;
      const success = await sendEmail(name, email, message, selectedItems, totalFee, false, 'Pending');
      if (success) form.reset();
    });

    const calculatorForm = document.getElementById('calculator-form');
    calculatorForm.addEventListener('change', calculateCost);
    calculatorForm.addEventListener('input', calculateCost);

    document.addEventListener('DOMContentLoaded', () => {
      observeFadeIn('.hero-section,.hire-me-card,.calculator-section,.hire-me-form');
      calculateCost();
      initiatePaymentOptions();
    });
  </script>
</body>
</html>
